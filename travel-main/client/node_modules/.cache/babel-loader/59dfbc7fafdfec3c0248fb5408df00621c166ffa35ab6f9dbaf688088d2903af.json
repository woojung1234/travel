{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\travel-main\\\\client\\\\src\\\\components\\\\ChatWindow\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './ChatWindow.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatWindow({\n  placeName\n}) {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: 'bot',\n    text: '안녕하세요! 궁금한 점을 물어보세요.'\n  }]);\n  const [input, setInput] = useState('');\n  const [suggestedQuestions, setSuggestedQuestions] = useState([]);\n\n  // 추가: placeDetails와 analysis 상태\n  const [placeDetails, setPlaceDetails] = useState(null);\n\n  // 1. 추천 질문 가져오기\n  useEffect(() => {\n    const fetchSuggestedQuestions = async () => {\n      try {\n        const response = await axios.post('/api/openai/get-suggestions', {\n          placeName\n        });\n        setSuggestedQuestions(response.data.questions);\n      } catch (error) {\n        console.error('추천 질문 가져오기 에러:', error);\n        setSuggestedQuestions([\"추천 질문을 불러오는 데 실패했습니다.\"]);\n      }\n    };\n    if (placeName) {\n      fetchSuggestedQuestions();\n    }\n  }, [placeName]);\n\n  // 2. placeDetails 및 analysis 가져오기\n  useEffect(() => {\n    const fetchPlaceDetailsAndAnalyze = async () => {\n      try {\n        // placeName으로 place_id를 얻는 과정 필요 (가정)\n        const searchRes = await axios.get('/api/places/search', {\n          params: {\n            query: placeName\n          }\n        });\n        const place = searchRes.data.results && searchRes.data.results[0];\n        if (!place) {\n          console.error(\"해당 장소를 찾을 수 없습니다.\");\n          return;\n        }\n        const place_id = place.place_id;\n        const detailsRes = await axios.get('/api/places/details', {\n          params: {\n            place_id\n          }\n        });\n\n        // detailsRes.data 안에 reviews 존재\n        const reviews = detailsRes.data.reviews || [];\n        // 리뷰가 없으면 analysis 불가능\n        if (reviews.length === 0) {\n          console.warn(\"한국어 리뷰가 없어 분석할 수 없습니다.\");\n          setPlaceDetails({\n            name: detailsRes.data.name,\n            address: detailsRes.data.formatted_address\n          });\n          return;\n        }\n\n        // 리뷰 분석 요청\n        const analyzeRes = await axios.post('/api/openai/analyze', {\n          reviews: reviews.map(r => r.text)\n        });\n\n        // placeDetails와 analysis 세팅\n        setPlaceDetails({\n          name: detailsRes.data.name,\n          address: detailsRes.data.formatted_address,\n          analysis: analyzeRes.data // 이 객체에 summary, advantages 등이 포함됨\n        });\n      } catch (error) {\n        console.error(\"장소 상세 정보 및 분석 가져오기 에러:\", error);\n      }\n    };\n    if (placeName) {\n      fetchPlaceDetailsAndAnalyze();\n    }\n  }, [placeName]);\n\n  // 메시지 전송\n  const sendMessage = async message => {\n    // 사용자 메시지를 추가\n    setMessages(prevMessages => [...prevMessages, {\n      sender: 'user',\n      text: message\n    }]);\n    try {\n      // AI 응답 요청\n      // placeDetails가 준비되지 않았다면 서버에서 \"분석된 내용이 없습니다.\" 라고 할 수 있음.\n      const response = await axios.post('/api/openai/chat', {\n        message,\n        placeDetails // placeDetails: { name, address, analysis } 형태로 전송\n      });\n      const botMessage = response.data.reply;\n\n      // 봇 메시지를 추가\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: botMessage\n      }]);\n    } catch (error) {\n      console.error('챗봇 에러:', error);\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: '응답을 받을 수 없습니다.'\n      }]);\n    }\n  };\n\n  // 입력창에서 메시지 전송\n  const handleSend = () => {\n    if (input.trim() === '') return;\n    const userMessage = input;\n    setInput('');\n    sendMessage(userMessage);\n  };\n\n  // 추천 질문 클릭 시 자동 전송\n  const handleSuggestedQuestionClick = question => {\n    sendMessage(question);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uCC57\\uBD07\\uACFC \\uB300\\uD654\\uD558\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"suggested-questions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uCD94\\uCC9C \\uC9C8\\uBB38\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: suggestedQuestions.map((question, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleSuggestedQuestionClick(question),\n          children: question\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender === 'user' ? 'user' : 'bot'}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: msg.sender === 'user' ? '나' : '봇'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 19\n          }, this), \": \", msg.text]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n        onKeyPress: e => e.key === 'Enter' && handleSend()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 7\n  }, this);\n}\n_s(ChatWindow, \"weprVSFF/eE2q2GB8NzeZ/30nEs=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","ChatWindow","placeName","_s","messages","setMessages","sender","text","input","setInput","suggestedQuestions","setSuggestedQuestions","placeDetails","setPlaceDetails","fetchSuggestedQuestions","response","post","data","questions","error","console","fetchPlaceDetailsAndAnalyze","searchRes","get","params","query","place","results","place_id","detailsRes","reviews","length","warn","name","address","formatted_address","analyzeRes","map","r","analysis","sendMessage","message","prevMessages","botMessage","reply","handleSend","trim","userMessage","handleSuggestedQuestionClick","question","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","msg","type","value","onChange","e","target","placeholder","onKeyPress","key","_c","$RefreshReg$"],"sources":["C:/projects/travel-main/client/src/components/ChatWindow/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './ChatWindow.css';\n\nfunction ChatWindow({ placeName }) {\n  const [messages, setMessages] = useState([\n    { sender: 'bot', text: '안녕하세요! 궁금한 점을 물어보세요.' },\n  ]);\n  const [input, setInput] = useState('');\n  const [suggestedQuestions, setSuggestedQuestions] = useState([]);\n\n  // 추가: placeDetails와 analysis 상태\n  const [placeDetails, setPlaceDetails] = useState(null);\n\n  // 1. 추천 질문 가져오기\n  useEffect(() => {\n    const fetchSuggestedQuestions = async () => {\n      try {\n        const response = await axios.post('/api/openai/get-suggestions', { placeName });\n        setSuggestedQuestions(response.data.questions);\n      } catch (error) {\n        console.error('추천 질문 가져오기 에러:', error);\n        setSuggestedQuestions([\"추천 질문을 불러오는 데 실패했습니다.\"]);\n      }\n    };\n    if (placeName) {\n      fetchSuggestedQuestions();\n    }\n  }, [placeName]);\n\n  // 2. placeDetails 및 analysis 가져오기\n  useEffect(() => {\n    const fetchPlaceDetailsAndAnalyze = async () => {\n      try {\n        // placeName으로 place_id를 얻는 과정 필요 (가정)\n        const searchRes = await axios.get('/api/places/search', { params: { query: placeName } });\n        const place = searchRes.data.results && searchRes.data.results[0];\n        if (!place) {\n          console.error(\"해당 장소를 찾을 수 없습니다.\");\n          return;\n        }\n\n        const place_id = place.place_id;\n        const detailsRes = await axios.get('/api/places/details', { params: { place_id } });\n\n        // detailsRes.data 안에 reviews 존재\n        const reviews = detailsRes.data.reviews || [];\n        // 리뷰가 없으면 analysis 불가능\n        if (reviews.length === 0) {\n          console.warn(\"한국어 리뷰가 없어 분석할 수 없습니다.\");\n          setPlaceDetails({ name: detailsRes.data.name, address: detailsRes.data.formatted_address });\n          return;\n        }\n\n        // 리뷰 분석 요청\n        const analyzeRes = await axios.post('/api/openai/analyze', { reviews: reviews.map(r => r.text) });\n\n        // placeDetails와 analysis 세팅\n        setPlaceDetails({\n          name: detailsRes.data.name,\n          address: detailsRes.data.formatted_address,\n          analysis: analyzeRes.data // 이 객체에 summary, advantages 등이 포함됨\n        });\n      } catch (error) {\n        console.error(\"장소 상세 정보 및 분석 가져오기 에러:\", error);\n      }\n    };\n\n    if (placeName) {\n      fetchPlaceDetailsAndAnalyze();\n    }\n  }, [placeName]);\n\n  // 메시지 전송\n  const sendMessage = async (message) => {\n    // 사용자 메시지를 추가\n    setMessages((prevMessages) => [...prevMessages, { sender: 'user', text: message }]);\n\n    try {\n      // AI 응답 요청\n      // placeDetails가 준비되지 않았다면 서버에서 \"분석된 내용이 없습니다.\" 라고 할 수 있음.\n      const response = await axios.post('/api/openai/chat', {\n        message,\n        placeDetails // placeDetails: { name, address, analysis } 형태로 전송\n      });\n      const botMessage = response.data.reply;\n\n      // 봇 메시지를 추가\n      setMessages((prevMessages) => [...prevMessages, { sender: 'bot', text: botMessage }]);\n    } catch (error) {\n      console.error('챗봇 에러:', error);\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { sender: 'bot', text: '응답을 받을 수 없습니다.' },\n      ]);\n    }\n  };\n\n  // 입력창에서 메시지 전송\n  const handleSend = () => {\n    if (input.trim() === '') return;\n    const userMessage = input;\n    setInput('');\n    sendMessage(userMessage);\n  };\n\n  // 추천 질문 클릭 시 자동 전송\n  const handleSuggestedQuestionClick = (question) => {\n    sendMessage(question);\n  };\n\n  return (\n      <div className=\"chat-window\">\n        <h2>챗봇과 대화하기</h2>\n        <div className=\"suggested-questions\">\n          <h4>추천 질문</h4>\n          <ul>\n            {suggestedQuestions.map((question, index) => (\n                <li key={index} onClick={() => handleSuggestedQuestionClick(question)}>\n                  {question}\n                </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"messages\">\n          {messages.map((msg, index) => (\n              <div\n                  key={index}\n                  className={`message ${msg.sender === 'user' ? 'user' : 'bot'}`}\n              >\n                <p>\n                  <strong>{msg.sender === 'user' ? '나' : '봇'}</strong>: {msg.text}\n                </p>\n              </div>\n          ))}\n        </div>\n        <div className=\"input-area\">\n          <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"메시지를 입력하세요\"\n              onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n          />\n          <button onClick={handleSend}>전송</button>\n        </div>\n      </div>\n  );\n}\n\nexport default ChatWindow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}